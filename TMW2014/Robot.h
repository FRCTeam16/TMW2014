// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef _ROBOT_H
#define _ROBOT_H
#include "RAWCConstants.h"
#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/DriveTrain.h"
#include "Subsystems/Odroid.h"
#include "Subsystems/Pickup.h"
#include "Subsystems/Shooter.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"
#include "BSTimer.h"
class Robot : public IterativeRobot {
public:
//	Command *autonomousCommand;
	static OI *oi;
	LiveWindow *lw;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static DriveTrain* driveTrain;
	static Shooter* shooter;
	static Pickup* pickup;
	static Odroid* odroid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	virtual void RobotInit();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
private:
	Kinect* kinect;
	void SMDB();
	void LEDSet(int led);
	bool KinectRightSelect();
	bool KinectLeftSelect();
	RAWCConstants* File;
	double FLOffset;
	double FROffset;
	double RLOffset;
	double RROffset;
	bool prevTrigger;
	Preferences* Prefs;
	typedef enum {fire1Side, fire1Center, fire2Side, fire2DriveForward, fire2DriveForwardWide, fire3FromCenter,}AutoProgram;
	typedef enum {DriveForwardReset, FirstResetShooter, ResetShooterAndCollect, FirstTurn, DriveForwardFirstTurn, Fire, Chill, WaitForHot, WaitToFire50, WaitToFire75, CollectBall, LoadBall, SecondTurn, DropPickup, DriveForward, End}AutoStep;
	typedef enum {Led0, Led1, Led2, Led3, Led4, Led5, Led6, Led7}LEDType;
	AutoStep autoStep;
	AutoProgram autoProgram;
	bool autoStepComplete;
	int turnDegree;
	BSTimer* autoStepTimer;
	BSTimer* onTargetTimer;
	BSTimer* autonomousTimer;
	BSTimer* beaterBarTimer;
	int autoStepIncrementer;
	vector<AutoStep> genericAutoProgram;
	SendableChooser* autoChooser;
	int turnDirection;
	float primaryCamOffset;
	float backupCamOffset;
	float driveForwardAngle;
	float peakBeaterBarCurrent;
	int ballCollectedInc;
	//SendableChooser* LEDChooser;
	float twist;
	float x;
	float y;
	bool undoTurnsPressed;
};
#endif
