// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
UsefulTimer* Shooter::fireTimer=NULL;
Shooter::Shooter() : Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	windowMotors = RobotMap::shooterWindowMotors;
	camLeft = RobotMap::shooterCamLeft;
	camRight = RobotMap::shooterCamRight;
	camPos = RobotMap::shooterCamPos;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	camController = RobotMap::shooterCamController;
	fireFlag = false;
	camMotorRatio = .53;
	CamPIDOut* CamPID;
	CamPID = RobotMap::shooterCamOut;
	CamPID->SetMultiplier(camMotorRatio);
	stage1Voltage = 1.5;
	camPosOffset = 1.75;
	fireTimer = new UsefulTimer();
	fireTimer->Start();
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.


void Shooter::CamChecker() {
	if(fireFlag){
		if(!fireTimer->HasPeriodPassed(.5) || CorrectVoltage(camPos->GetAverageVoltage() - camPosOffset) > stage1Voltage) {
			windowMotors->Set(-1);
			camLeft->Set(-camMotorRatio);
			camRight->Set(-camMotorRatio);
		}
		
		else if(!camController->IsEnabled()){
			camController->Enable();
			camController->SetSetpoint(CorrectVoltage(0 + camPosOffset));
		}
		
		if((camController->OnTarget() && camController->IsEnabled()) || fireTimer->HasPeriodPassed(5)) {
			camController->Disable();
			fireFlag = false;
			windowMotors->Set(0);
			camLeft->Set(0);
			camRight->Set(0);
		}
	}
	else {
		windowMotors->Set(0);
		camLeft->Set(0);
		camRight->Set(0);
	}
}

void Shooter::Fire() {
	if(!fireFlag) {
		fireFlag = true;
		fireTimer->Reset();
	}
}

bool Shooter::GetFiring() {
	return fireFlag;
}

float Shooter::CorrectVoltage(float setpoint) {
	
	if (setpoint < 0)
	{
		return setpoint + 5;
	}
	else if (setpoint > 5)
	{
		return setpoint - 5;
	}
	else if (setpoint == 5)
	{
		return 0;
	}
	else
	{
		return setpoint;
	}
}

float Shooter::GetCorrectedCamPos(){
	return (CorrectVoltage(camPos->GetAverageVoltage()-camPosOffset));
}
