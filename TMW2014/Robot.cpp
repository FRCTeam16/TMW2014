// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
Shooter* Robot::shooter = 0;
Pickup* Robot::pickup = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
BSTimer* autoStepTimer = NULL;
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	shooter = new Shooter();
	pickup = new Pickup();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	prevTrigger = false;
	
	File = RAWCConstants::getInstance();
	driveTrain->SetWheelbase(20.625/2, 20.625, 20.625/2);
	FLOffset = File->getValueForKey("FLOff");
	FROffset = File->getValueForKey("FROff");
	RLOffset = File->getValueForKey("RLOff");
	RROffset = File->getValueForKey("RROff");
	driveTrain->SetOffsets(FLOffset, FROffset, RLOffset, RROffset);
	
	driveTrain->frontLeft->Enable();
	driveTrain->frontRight->Enable();
	driveTrain->rearLeft->Enable();
	driveTrain->rearRight->Enable();
	
	primaryCamOffset = File->getValueForKey("PCOffset");
	backupCamOffset = File->getValueForKey("BCOffset");
	shooter->SetCamOffsets(primaryCamOffset, backupCamOffset);
		
	pickup->comp->Start();
	
	autoStep = DropPickup;
	autoProgram = fire2FromCenterNarrow;
	autoStepComplete = false;
	autoStepIncrementer = 0;
	turnDirection = 0;
	
	autoChooser = new SendableChooser();
	autoChooser->AddDefault("1. Shoot 1 From Left", (void*)fire1Left);
	autoChooser->AddObject("2. Shoot 1 From Right", (void*)fire1Right);
	autoChooser->AddObject("3. Shoot 2 From Center-Narrow", (void*)fire2FromCenterNarrow);
	autoChooser->AddObject("4. Shoot 2 From Center-Wide", (void*)fire2FromCenterWide);
	autoChooser->AddObject("4. Shoot 3 From Center", (void*)fire3FromCenter);
	autoChooser->AddObject("6. WideTurnTest", (void*)wideTurnTest);
	autoChooser->AddObject("7. NarrowTurnTest", (void*)narrowTurnTest);
	autoChooser->AddObject("8. TestVisionSystem", (void*)testVisionSystem);
	SmartDashboard::PutData("Autonomous Chooser", autoChooser);
	autoStepTimer = new BSTimer();
	autoStepTimer->Start();
	onTargetTimer = new BSTimer();
	onTargetTimer->Start();
	autonomousTimer = new BSTimer();
	autonomousTimer->Start();
	beaterBarTimer = new BSTimer();
	beaterBarTimer->Start();
	driveTrain->sendProcessImage->Set(1);
	driveTrain->ringLights->Set(true);
	driveForwardAngle = 0;
}	
void Robot::DisabledPeriodic() {
	if(oi->getDriverJoystickRight()->GetRawButton(7))
		SMDB();
	
	pickup->beaterBarOut->Set(false);
	pickup->wings->Set(false);
	
	Scheduler::GetInstance()->Run();
}
	
void Robot::AutonomousInit() {
    autoProgram = static_cast<AutoProgram>((int)(autoChooser->GetSelected()));
	autoStepTimer->Reset();
	autoStepIncrementer = 0;
	genericAutoProgram.clear();
	autonomousTimer->Reset();
	driveTrain->gyro->Reset();
	switch(autoProgram) {
	case testVisionSystem:
		genericAutoProgram.push_back(FindTarget);
		genericAutoProgram.push_back(FirstTurn);
		genericAutoProgram.push_back(End);
		break;
	
	case fire2FromCenterNarrow: case fire2FromCenterWide:
//		genericAutoProgram.push_back(RelieveStress);
		genericAutoProgram.push_back(ResetShooter);
		genericAutoProgram.push_back(FindTarget);
		break;
		
	case fire3FromCenter:
//		genericAutoProgram.push_back(RelieveStress);
		genericAutoProgram.push_back(ResetShooter);
		genericAutoProgram.push_back(FindTarget);
		genericAutoProgram.push_back(FirstTurn);
		genericAutoProgram.push_back(DropPickup);
		genericAutoProgram.push_back(Fire);
		genericAutoProgram.push_back(ResetShooter);
		//genericAutoProgram.push_back(CollectBall);
		genericAutoProgram.push_back(LoadBall);
		genericAutoProgram.push_back(SecondTurn);
		genericAutoProgram.push_back(DropPickup);
		genericAutoProgram.push_back(WaitToFire);
		genericAutoProgram.push_back(Fire);		
		genericAutoProgram.push_back(ResetShooter);
		//genericAutoProgram.push_back(CollectBall);
		genericAutoProgram.push_back(LoadBall);
		genericAutoProgram.push_back(DriveForward);
		genericAutoProgram.push_back(DropPickup);
		genericAutoProgram.push_back(Fire);
		genericAutoProgram.push_back(End);
		break;
		
	case fire1Left: case fire1Right:
		genericAutoProgram.push_back(DropPickup);
		//genericAutoProgram.push_back(RelieveStress);
		genericAutoProgram.push_back(ResetShooter);
		genericAutoProgram.push_back(FindTarget);
		genericAutoProgram.push_back(WaitToFire);
		genericAutoProgram.push_back(Fire);	
		genericAutoProgram.push_back(Chill);
		genericAutoProgram.push_back(DriveForward);
		genericAutoProgram.push_back(End);
		break;
				
	case wideTurnTest: case narrowTurnTest:
		genericAutoProgram.push_back(FindTarget);
		genericAutoProgram.push_back(FirstTurn);
		genericAutoProgram.push_back(SecondTurn);
		genericAutoProgram.push_back(FirstTurn);
		genericAutoProgram.push_back(SecondTurn);
		genericAutoProgram.push_back(FirstTurn);
		genericAutoProgram.push_back(SecondTurn);
		genericAutoProgram.push_back(End);
	}
	autoStep = genericAutoProgram[autoStepIncrementer];
	
	driveTrain->DriveControlTwist->Enable();
	driveForwardAngle = 0;
	driveTrain->ringLights->Set(true);
	//driveTrain->sendProcessImage->Set(true);
}
	
void Robot::AutonomousPeriodic() {
	SMDB();
	shooter->CamChecker();
	
	int turnDegree = 10;
	
	if (autoProgram == fire2FromCenterWide || autoProgram == wideTurnTest || autoProgram == fire3FromCenter) {
		turnDegree = 20;
	}
	
	if(autoProgram == fire1Right || autoProgram == fire1Left) {
		turnDegree = 0;
	}
	
	switch(autoStep) {
	case RelieveStress:
		driveTrain->Crab(0,0,0,false);
		shooter->RelieveStress();
		SmartDashboard::PutString("AutoStep", "RelieveStress");
		if(shooter->GetStressReliefComplete())
			autoStepComplete = true;
		break;
		
	case ResetShooter:
		driveTrain->Crab(0,0,0,false);
		pickup->beaterBar->Set(1);
		if(!shooter->GetFiring())
			shooter->Reset();
		SmartDashboard::PutString("AutoStep", "ResetShooter");
		if(shooter->GetResetCamComplete()) {
			autoStepComplete = true;
			pickup->beaterBar->Set(0);
		}
		break;
	
	case FindTarget:
		driveTrain->Crab(0,0,0,false);
		if(turnDirection != -1) {
			if(!driveTrain->targetLeft->Get())
				turnDirection = -1;
			else
				turnDirection = 1;
		}
		SmartDashboard::PutString("AutoStep", "FindTarget");
		if(autonomousTimer->HasPeriodPassed(1.0)) {
			autoStepComplete = true;
			driveTrain->ringLights->Set(false);
			driveTrain->sendProcessImage->Set(false);
			if(autoProgram == fire2FromCenterNarrow || autoProgram == fire2FromCenterNarrow) {
				if(turnDirection < 0) {
					genericAutoProgram.push_back(FirstTurn);
					genericAutoProgram.push_back(DropPickup);
					genericAutoProgram.push_back(Fire);
					genericAutoProgram.push_back(CollectBall);
					genericAutoProgram.push_back(ResetShooter);
					genericAutoProgram.push_back(LoadBall);
					genericAutoProgram.push_back(SecondTurn);
					genericAutoProgram.push_back(DropPickup);
					genericAutoProgram.push_back(WaitToFire);
					genericAutoProgram.push_back(Fire);
					genericAutoProgram.push_back(Chill);
					genericAutoProgram.push_back(DriveForward);
					genericAutoProgram.push_back(End);
				}
				else
				{
					genericAutoProgram.push_back(FirstTurn);
					genericAutoProgram.push_back(DropPickup);
					genericAutoProgram.push_back(Fire);
					genericAutoProgram.push_back(RaisePickup);
					genericAutoProgram.push_back(SecondTurn);
					genericAutoProgram.push_back(DropPickup);
					genericAutoProgram.push_back(CollectBall);
					genericAutoProgram.push_back(ResetShooter);
					genericAutoProgram.push_back(LoadBall);
					genericAutoProgram.push_back(WaitToFire);
					genericAutoProgram.push_back(Fire);
					genericAutoProgram.push_back(Chill);
					genericAutoProgram.push_back(DriveForward);
					genericAutoProgram.push_back(End);
				}
			}
		}
		break;
		
	case WaitToFire:
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "FindTarget");
		if((turnDirection < 0 && autoProgram == fire1Left) || (turnDirection > 0 && autoProgram == fire1Right))
			autoStepComplete = true;
		else
			if(autonomousTimer->HasPeriodPassed(5.0))
				autoStepComplete = true;
		break;
	
	case FirstTurn:
		driveTrain->DriveControlTwist->SetPID(.035, 0, .15);
		driveTrain->DriveControlTwist->SetSetpoint(turnDegree*turnDirection);
		driveTrain->Crab(driveTrain->CrabSpeedTwist->Get(), 0, 0, true);
		SmartDashboard::PutString("AutoStep", "FirstTurn");
		if(!driveTrain->DriveControlTwist->OnTarget()) {
			onTargetTimer->Reset();
		}
		if(onTargetTimer->HasPeriodPassed(.2) && shooter->GetResetCamComplete()){
			autoStepComplete = true;
		}
		break;
	
	case SecondTurn:
		driveTrain->DriveControlTwist->SetSetpoint(turnDegree*-turnDirection);
		driveTrain->Crab(driveTrain->CrabSpeedTwist->Get(), 0, 0, true);
		driveTrain->DriveControlTwist->SetPID(.035, 0, .15);
		pickup->beaterBar->Set(-.5);
		SmartDashboard::PutString("AutoStep", "SecondTurn");
		if(!driveTrain->DriveControlTwist->OnTarget()) {
			onTargetTimer->Reset();
		}
		if(onTargetTimer->HasPeriodPassed(.2) && shooter->GetResetCamComplete()){
			autoStepComplete = true;
			pickup->beaterBar->Set(0);
		}
		break;
		
	case Fire:
		driveTrain->Crab(0,0,0,false);
		shooter->Fire(0, false);
		SmartDashboard::PutString("AutoStep", "Fire");
		if(shooter->GetCorrectedCamPos() > 4.0)
			autoStepComplete = true;
		break;
			
	case Chill:
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "Chill");
		if(autoStepTimer->HasPeriodPassed(.5))
			autoStepComplete = true;
		break;
	
	case CollectBall:
		pickup->beaterBar->Set(1);
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "CollectBall");
		if(autoStepTimer->HasPeriodPassed(1.5)) {
			autoStepComplete = true;
			pickup->beaterBar->Set(0);
		}
		break;
		
		
	case LoadBall:
		pickup->beaterBarOut->Set(false);
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "LoadBall");
		if(autoStepTimer->HasPeriodPassed(.3) || !shooter->ballNotPresent->Get())
			autoStepComplete = true;
		break;
		
	case DropPickup:
		pickup->beaterBarOut->Set(true);
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "DropPickup");
		if(autoStepTimer->HasPeriodPassed(0.3))
			autoStepComplete = true;
		break;
	
	case RaisePickup:
		pickup->beaterBarOut->Set(false);
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "RaisePickup");
		if(autoStepTimer->HasPeriodPassed(0.3))
			autoStepComplete = true;
		break;		
		
	case DriveForward:
		if(driveForwardAngle == 0)
			driveForwardAngle = driveTrain->gyro->GetAngle();
		driveTrain->DriveControlTwist->SetSetpoint(driveForwardAngle);
		driveTrain->Crab(driveTrain->CrabSpeedTwist->Get(), -1, 0, true);
		pickup->beaterBar->Set(-.5);
		SmartDashboard::PutString("AutoStep", "DriveForward");
		if(autoStepTimer->HasPeriodPassed(1.0)) {
			autoStepComplete = true;
			pickup->beaterBar->Set(0);
		}
		break;
	case DriveForwardAndFire:
		if(driveForwardAngle == 0)
			driveForwardAngle = driveTrain->gyro->GetAngle();
		driveTrain->DriveControlTwist->SetSetpoint(driveForwardAngle);
		driveTrain->Crab(driveTrain->CrabSpeedTwist->Get(), -1, 0, true);
		if(autoStepTimer->HasPeriodPassed(.2))
			pickup->beaterBarOut->Set(true);
		if(autoStepTimer->HasPeriodPassed(.5))
			shooter->Fire(0, false);
		SmartDashboard::PutString("AutoStep", "DriveForward");
		if(autoStepTimer->HasPeriodPassed(1.0))
			autoStepComplete = true;
		break;
		
		
		
	case End:
		driveTrain->Crab(0,0,0,false);
		SmartDashboard::PutString("AutoStep", "End");
		break;
	}
	
/***********************Increment Through Program****************************/	
	if (autoStepComplete) {
		autoStepTimer->Reset();
		autoStepComplete = false;
		autoStepIncrementer ++;
		onTargetTimer->Reset();
		try {
			autoStep = genericAutoProgram.at(autoStepIncrementer);
		}
		catch (const out_of_range& oor) {
			printf ("AutoProgram Vector Out of Range \n");
		}
	}
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	driveTrain->DriveControlTwist->Disable();
	driveTrain->ringLights->Set(false);
}
	
void Robot::TeleopPeriodic() {
	
	if(oi->getDriverJoystickRight()->GetRawButton(7))
		SMDB();
		
/******************DRIVETRAIN**************************************/	
	
	//Resets gyro to zero when crab starts
	if (!prevTrigger && oi->getDriverJoystickRight()->GetRawButton(1))
		driveTrain->gyro->Reset();
	
	prevTrigger = oi->getDriverJoystickRight()->GetRawButton(1);
	
	if(oi->getDriverJoystickRight()->GetRawButton(1))
		driveTrain->Crab(oi->getJoystickTwist(),-oi->getJoystickY(),oi->getJoystickX(),true);	
	else 
		driveTrain->Steer(oi->getLeftJoystickXRadians(),oi->getJoystickY(),0.5);
	
	
/******************SHOOTER**************************************/
	
	if(oi->getGamePad()->GetRawButton(10)){
		shooter->RunCams(-oi->getGamePad()->GetRawAxis(2), true);
	}
	else if(oi->getDriverJoystickRight()->GetRawButton(9) || oi->getGamePad()->GetRawButton(9)){
		shooter->RelieveStress();
	}
	else if(oi->getDriverJoystickRight()->GetRawButton(11)){
		shooter->Reset();
	}
	else {
		shooter->CamChecker(); //Runs every cycle to control cam postion
		if((oi->getGamePad()->GetRawButton(4) || oi->getDriverJoystickRight()->GetRawButton(3)) && !shooter->GetFiring()) {
			if(!pickup->beaterBarOut->Get())
				beaterBarTimer->Reset();
			pickup->beaterBarOut->Set(true);
			shooter->Fire(0.6 - beaterBarTimer->Get(), true);
		}
	}
	
	shooter->fingers->Set(oi->getGamePad()->GetRawButton(2));
	
/******************WINGS**************************************/
	
	if(oi->getGamePad()->GetRawButton(7))
		pickup->wings->Set(true);
	if(oi->getGamePad()->GetRawButton(5))
		pickup->wings->Set(false);
	
	
/******************BEATERBAR**************************************/	
	
	pickup->beaterBar->Set((oi->getGamePad()->GetRawAxis(4)));
	
	if (oi->getGamePad()->GetRawButton(8)) {
		pickup->beaterBarOut->Set(true);
		beaterBarTimer->Reset();
	}
	if (oi->getGamePad()->GetRawButton(6)) {
		pickup->beaterBarOut->Set(false);
	}
	
	
/******************IMAGE PROCESSING**************************************/	
	driveTrain->sendProcessImage->Set(oi->getDriverJoystickLeft()->GetRawButton(6));
	driveTrain->ringLights->Set(oi->getDriverJoystickLeft()->GetRawButton(6));	
}
void Robot::TestPeriodic() {
	lw->Run();
}
void Robot::SMDB() {
	//Joystick Variables
	SmartDashboard::PutNumber("RightStickY",oi->getDriverJoystickRight()->GetY());
	SmartDashboard::PutNumber("RightStickX",oi->getDriverJoystickRight()->GetX());
	SmartDashboard::PutNumber("LeftStickX", oi->getDriverJoystickLeft()->GetX());
	SmartDashboard::PutNumber("ScaledRadians",oi->getLeftJoystickXRadians());
	SmartDashboard::PutNumber("ScalingFactor",oi->getDriverJoystickRight()->GetTwist()/2+1.5);
	//Gyro Variables
	SmartDashboard::PutNumber("GyroAngle", driveTrain->gyro->GetAngle());
	SmartDashboard::PutNumber("GyroCenter", driveTrain->gyro->GetCenter());
	SmartDashboard::PutNumber("GyroOffset", driveTrain->gyro->GetOffset());
	
	//Wheel Module Voltages
	SmartDashboard::PutNumber("FrontLeftVol",driveTrain->frontLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("FrontRightVol",driveTrain->frontRightPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RearLeftVol",driveTrain->rearLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RearRightVol",driveTrain->rearRightPos->GetAverageVoltage());	
	//Wheel Module Errors
	SmartDashboard::PutNumber("FLError", driveTrain->frontLeft->GetError());
	SmartDashboard::PutNumber("FRError", driveTrain->frontRight->GetError());
	SmartDashboard::PutNumber("RLError", driveTrain->rearLeft->GetError());
	SmartDashboard::PutNumber("RRError", driveTrain->rearRight->GetError());
	//Wheel Module Setpoints
	SmartDashboard::PutNumber("FLSetPoint", driveTrain->frontLeft->GetSetpoint());
	SmartDashboard::PutNumber("FRSetPoint", driveTrain->frontRight->GetSetpoint());
	SmartDashboard::PutNumber("RLSetPoint", driveTrain->rearLeft->GetSetpoint());
	SmartDashboard::PutNumber("RRSetPoint", driveTrain->rearRight->GetSetpoint());
	//Twist Control
	SmartDashboard::PutNumber("PIDTwistOutput", driveTrain->DriveControlTwist->Get());
	SmartDashboard::PutNumber("PIDTwistError", driveTrain->DriveControlTwist->GetError());
	SmartDashboard::PutNumber("PIDTwistSetpoint", driveTrain->DriveControlTwist->GetSetpoint());
	//ShooterValues
	SmartDashboard::PutNumber("CorrectedCamPostion",shooter->GetCorrectedCamPos());
	SmartDashboard::PutNumber("RawPrimaryCamPostion",shooter->camPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RawBackupCamPosition", shooter->backupCamPos->GetAverageVoltage());
	SmartDashboard::PutBoolean("CamPositionSensorStatus", shooter->GetCamPosStatus());
	SmartDashboard::PutBoolean("BackupCamPositionSensorStatus", shooter->GetBackupCamPosStatus());
	SmartDashboard::PutNumber("CamLeftOutput", shooter->camLeft->Get());
	SmartDashboard::PutNumber("CamRightOutput", shooter->camRight->Get());
	SmartDashboard::PutNumber("CamLeftCurrent", shooter->camLeft->GetOutputCurrent());
	SmartDashboard::PutNumber("CamRightCurrent", shooter->camRight->GetOutputCurrent());
	SmartDashboard::PutBoolean("BallNotPresent", shooter->ballNotPresent->Get());
	SmartDashboard::PutBoolean("CamResetComplete", shooter->GetResetCamComplete());
	
	//BeaterBar
	SmartDashboard::PutNumber("BeaterBarCurrent", pickup->beaterBar->GetOutputCurrent());
	
	//Jaguar Stauses
	SmartDashboard::PutBoolean("06-FLSteerJagAlive",driveTrain->frontLeftSteer->IsAlive());
	SmartDashboard::PutBoolean("07-FRSteerJagAlive",driveTrain->frontRightSteer->IsAlive());
	SmartDashboard::PutBoolean("08-RLSteerJagAlive",driveTrain->rearLeftSteer->IsAlive());
	SmartDashboard::PutBoolean("09-RRSteerJagAlive",driveTrain->rearRightSteer->IsAlive());
SmartDashboard::PutBoolean("11-CamLeftJagAlive",shooter->camLeft->IsAlive());
	SmartDashboard::PutBoolean("12-CamRightJagAlive",shooter->camRight->IsAlive());
	SmartDashboard::PutBoolean("13-BeaterBarJagAlive",pickup->beaterBar->IsAlive());
	
	//Vision Processing Info
	SmartDashboard::PutBoolean("targetleft",driveTrain->targetLeft->Get());
	SmartDashboard::PutBoolean("odroidHeartBeat",driveTrain->odroidHeartBeat->Get());	
}
START_ROBOT_CLASS(Robot);
